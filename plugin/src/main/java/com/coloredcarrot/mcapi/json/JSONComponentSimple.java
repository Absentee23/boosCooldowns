package com.coloredcarrot.mcapi.json;

import org.bukkit.entity.Player;

import net.md_5.bungee.api.ChatColor;

/**
 * The base class of the JSONComponent class.
 * This class does not support hover and click actions.
 * All rights reserved.
 *
 * @author ColoredCarrot
 */
public class JSONComponentSimple {

    protected String generatedJSON;
    protected boolean generated = false;
    private String text;
    private JSONColor color;
    private boolean bold = false,
            italic = false,
            strikethrough = false,
            underlined = false,
            obfuscated = false;

    /**
     * Constructs a new JSONComponent with a given base text.
     *
     * @param text (String) - the base text this JSONComponent contains
     */
    public JSONComponentSimple(final String text) {

        if (text == null) {
            throw new IllegalArgumentException("text cannot be null!");
        }
        if (text.contains("|||")) {
            throw new IllegalArgumentException("text cannot contain the following char sequence: |||");
        }

        this.text = text;
        color = JSONColor.WHITE;

    }

    /**
     * Generates a JSONComponent from a string following the following format:<br />
     * {@code text|||color|||bold|||italic|||strikethrough|||underlined|||obfuscated}<br />
     * <b>Important!</b> Hover and click action data is not supported!
     *
     * @param str (String) - the string generated by {@link JSONComponent#toString()}
     * @return (JSONComponent) - the JSONComponent matching the String or null if the String is invalid.
     * @see #toString()
     */
    public static JSONComponentSimple fromString(final String str) {

        try {

            final String[] parts = str.split("|||");

            if (parts == null || parts.length != 7) {
                return null;
            }

            return new JSONComponentSimple(parts[0])
                    .setColor(JSONColor.valueOf(parts[1]))
                    .setBold(Boolean.valueOf(parts[2]))
                    .setItalic(Boolean.valueOf(parts[3]))
                    .setStrikethrough(Boolean.valueOf(parts[4]))
                    .setUnderlined(Boolean.valueOf(parts[5]))
                    .setObfuscated(Boolean.valueOf(parts[6]));

        } catch (final Exception e) {
            return null;
        }

    }

    /**
     * Constructs a new JSONComponentSimple Object, with all the attributes this one has.
     */
    @Override
    public JSONComponentSimple clone() {

        return new JSONComponentSimple(text)
                .setColor(color)
                .setBold(bold)
                .setItalic(italic)
                .setStrikethrough(strikethrough)
                .setUnderlined(underlined)
                .setObfuscated(obfuscated);

    }

    /**
     * Generates the raw json message matching this JSONComponent.
     * Generally speaking, you should not have a use for this method as get() calls it as well.
     *
     * @return (JSONComponent) - this JSONComponent Object, for chaining.
     * @see JSONComponent#get()
     */
    public JSONComponentSimple generate() {

        generatedJSON = "{\"text\":\"" + text + "\",\"color\":\"" + color.toString() + "\",\"bold\":\"" + bold + "\",\"italic\":\"" + italic + "\",\"strikethrough\":\"" + strikethrough + "\",\"underlined\":\"" + underlined + "\",\"obfuscated\":\"" + obfuscated + "\"}";

        generated = true;

        return this;

    }

    /**
     * Combines this JSONComponent with a number of other JSONComponents, creating a new JSON Object.
     *
     * @param withComponents (JSONComponent[]) - the JSONComponent Objects to combine this JSONComponent with
     * @return (JSON) - a newly created JSON Object containing this and all specified JSONComponent Objects.
     */
    public JSON combine(final JSONComponentSimple... withComponents) {

        final JSON json = new JSON(this);

        for (final JSONComponentSimple with : withComponents) {
            json.add(with);
        }

        return json;

    }

    /**
     * Adds this JSONComponent to a JSON Object.
     *
     * @param json (JSON) - the JSON to add this JSONComponent to
     * @return (JSONComponent) - this JSONComponent Object, for chaining.
     * @see JSON#add(JSONComponent)
     * @see JSONComponent#toJSON()
     */
    public JSONComponentSimple addToJSON(final JSON json) {

        json.add(this);

        return this;

    }

    /**
     * Transforms this JSONComponent to a JSON Object.
     *
     * @return (JSON) - this JSONComponent as a JSON Object.
     */
    public JSON toJSON() {
        return new JSON(this);
    }

    /**
     * Gets the raw JSON message of this JSONComponent.
     *
     * @return (String) - the raw JSON message.
     */
    public String get() {

        if (!generated) {
            generate();
        }

        return generatedJSON;

    }

    /**
     * Sends get() to a player.
     *
     * @param player (Player) - the player to send the message to
     * @return (JSONComponent) - this JSONComponent Object, for chaining.
     * @see JSONComponent_old#get()
     */
    public JSONComponentSimple send(final Player to) {

        JSON.sendJSON(to, get());

        return this;

    }

    /**
     * Transforms this JSONComponent into a String readable by {@link JSONComponent#fromString(String)}.<br />
     * It follows the following format:<br />
     * {@code text|||color|||bold|||italic|||strikethrough|||underlined|||obfuscated}<br />
     * <b>Important!</b> This will erase all hover and click action data!
     *
     * @see #fromString(String)
     */
    @Override
    public String toString() {

        return text + "|||" + color.toString() + "|||" + bold + "|||" + italic + "|||" + strikethrough + "|||" + underlined + "|||" + obfuscated;

    }

    /**
     * Returns a non-JSON version of this JSONComponentSimple, following the following pattern:
     * ChatColor.COLOR + (bold ? ChatColor.BOLD) + (italic ? ChatColor.ITALIC) + (strikethrough ? ChatColor.STRIKETHROUGH) + (underlined ? ChatColor.UNDERLINE) + (obfuscated ? ChatColor.MAGIG) + text
     *
     * @return (String) - the ChatColor version
     * @see JSON#getChatColorVersion()
     */
    public String getChatColorVersion() {

        return ChatColor.valueOf(color.name())
                + (bold ? ChatColor.BOLD.toString() : "")
                + (italic ? ChatColor.ITALIC.toString() : "")
                + (strikethrough ? ChatColor.STRIKETHROUGH.toString() : "")
                + (underlined ? ChatColor.UNDERLINE.toString() : "")
                + (obfuscated ? ChatColor.MAGIC.toString() : "")
                + text;

    }

    /**
     * Gets the text this JSONComponent holds.
     *
     * @return (String) - the text that this JSONComponent holds.
     * @see JSONComponent_old#setText(String)
     */
    public String getText() {
        return text;
    }

    /**
     * Sets the text of this JSONComponent.
     *
     * @param text (String) - the new text
     * @return (JSONComponent) - this JSONComponent Object, for chaining.
     */
    public JSONComponentSimple setText(final String text) {
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null!");
        }
        if (text.contains("|||")) {
            throw new IllegalArgumentException("text cannot contain the following char sequence: |||");
        }
        this.text = text;
        generated = false;
        return this;
    }

    /**
     * Gets the color of the text that this JSONComponent holds.
     *
     * @return (JSONColor) - the color of the text that this JSONComponent holds.
     * @see JSONComponent_old#setColor(JSONColor)
     */
    public JSONColor getColor() {
        return color;
    }

    /**
     * Sets the color of this JSONComponent.
     *
     * @param color (JSONColor) - the color to set this JSONObject to
     * @return (JSONComponent) - this JSONComponent Object, for chaining.
     */
    public JSONComponentSimple setColor(final JSONColor color) {
        if (color == null) {
            throw new IllegalArgumentException("color cannot be null!");
        }
        this.color = color;
        generated = false;
        return this;
    }

    /**
     * Gets whether the text of this JSONComponent is bold.
     *
     * @return (boolean) - whether it is bold.
     * @see JSONComponent_old#setBold(boolean)
     */
    public boolean isBold() {
        return bold;
    }

    /**
     * Sets whether the text of this JSONComponent should be bold.
     *
     * @param bold (boolean) - whether the text should be bold
     * @return (JSONComponent) - this JSONComponent Object, for chaining.
     */
    public JSONComponentSimple setBold(final boolean bold) {
        this.bold = bold;
        generated = false;
        return this;
    }

    /**
     * Gets whether the text of this JSONComponent is italic.
     *
     * @return (boolean) - whether it is italic.
     * @see JSONComponent_old#setItalic(boolean)
     */
    public boolean isItalic() {
        return italic;
    }

    /**
     * Sets whether the text of this JSONComponent should be italic.
     *
     * @param italic (boolean) - whether the text should be italic
     * @return (JSONComponent) - this JSONComponent Object, for chaining.
     */
    public JSONComponentSimple setItalic(final boolean italic) {
        this.italic = italic;
        generated = false;
        return this;
    }

    /**
     * Gets whether the text of this JSONComponent is strikethrough.
     *
     * @return (boolean) - whether it is strikethrough.
     * @see JSONComponent_old#setStrikethrough(boolean)
     */
    public boolean isStrikethrough() {
        return strikethrough;
    }

    /**
     * Sets whether the text of this JSONComponent should be strikethrough.
     *
     * @param strikethrough (boolean) - whether the text should be strikethrough
     * @return (JSONComponent) - this JSONComponent Object, for chaining.
     */
    public JSONComponentSimple setStrikethrough(final boolean strikethrough) {
        this.strikethrough = strikethrough;
        generated = false;
        return this;
    }

    /**
     * Gets whether the text of this JSONComponent is underlined.
     *
     * @return (boolean) - whether it is underlined.
     * @see JSONComponent_old#setUnderlined(boolean)
     */
    public boolean isUnderlined() {
        return underlined;
    }

    /**
     * Sets whether the text of this JSONComponent should be underlined.
     *
     * @param underlined (boolean) - whether the text should be underlined
     * @return (JSONComponent) - this JSONComponent Object, for chaining.
     */
    public JSONComponentSimple setUnderlined(final boolean underlined) {
        this.underlined = underlined;
        generated = false;
        return this;
    }

    /**
     * Gets whether the text of this JSONComponent is obfuscated.
     *
     * @return (boolean) - whether it is obfuscated.
     * @see JSONComponent_old#setObfuscated(boolean)
     */
    public boolean isObfuscated() {
        return obfuscated;
    }

    /**
     * Sets whether the text of this JSONComponent should be obfuscated.
     *
     * @param obfuscated (boolean) - whether the text should be obfuscated
     * @return (JSONComponent) - this JSONComponent Object, for chaining.
     */
    public JSONComponentSimple setObfuscated(final boolean obfuscated) {
        this.obfuscated = obfuscated;
        generated = false;
        return this;
    }

    /**
     * Gets whether the raw json for this JSONComponent has already been generated.
     * Generally speaking, you should have no use for this method.
     *
     * @return (boolean) - whether it was already generated.
     */
    public boolean isGenerated() {
        return generated;
    }

    /**
     * Resets the generation status of this JSONComponentSimple Object, forcing the next get() method to run generate().
     *
     * @return (JSONComponentSimple) - this JSONComponentSimple Object, for chaining.
     * @see {@link #generate()}, {@link #get()}
     */
    public JSONComponentSimple resetGenerationStatus() {

        generated = false;

        return this;

    }

}
